{- Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at
   
     http://www.apache.org/licenses/LICENSE-2.0
   
   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-}
module frunit.FrUnit where

private data LinkedList a = native java.util.LinkedList where
  native new :: () -> STMutable s (LinkedList a)
  native add :: Mutable s (LinkedList a) -> a  -> ST s ()

  -- Converts a Frege List into a Java LinkedList
  fromList   :: [a] -> STMutable s (LinkedList a)
  fromList ls = LinkedList.new() >>= (\ll -> go ll ls)
    where go :: Mutable s (LinkedList a) -> [a] -> STMutable s (LinkedList a)
          go ll     [] = return ll
          go ll (x:xs) = ll.add x >> go ll xs

-- The test shell, used as container of our Frege expressions
private data TestNative = native frunit.FrTest where
  native runTests frunit.FrTest.runTests :: Mutable s (LinkedList TestInt) -> ST s Bool

  run :: [TestCase] -> ST s Bool
  run testCases = do
    javaTestCases <- LinkedList.fromList (map toJArray testCases)
    TestNative.runTests javaTestCases

private data ArrayUtil = native frunit.FrTest.Util where
  pure native fromPair frunit.FrTest.Util.fromPair :: a -> b -> JArray c

private data Assert = native org.junit.Assert where
  native assertTrue org.junit.Assert.assertTrue :: Bool -> ST s ()
                                                | String -> Bool -> ST s ()
  native assertFalse org.junit.Assert.assertFalse :: Bool -> ST s ()
                                                  | String -> Bool -> ST s ()
  native fail org.junit.Assert.fail :: () -> ST s ()
                                    | String -> ST s ()

-- Internally a test is an array of Object because JUnit
private type TestInt = JArray Object

-- Convert a test case into an array of objects because JUnit
private toJArray :: TestCase -> TestInt
private toJArray (TestCase s a) = ArrayUtil.fromPair s a

--- Execute a list of tests
runTests :: [TestCase] -> IO ()
runTests tests = do
  result <- TestNative.run tests
  System.exit (if result then 0 else 1)

assertTrue' :: Bool -> ST s ()
assertTrue' = Assert.assertTrue

assertTrue :: String -> Bool -> ST s ()
assertTrue msg b = Assert.assertTrue msg b

assertFalse' :: Bool -> ST s ()
assertFalse' = Assert.assertFalse

assertFalse :: String -> Bool -> ST s ()
assertFalse msg b = Assert.assertFalse msg b

fail' :: ST s ()
fail' = Assert.fail ()

fail :: String -> ST s ()
fail s = Assert.fail s

assertEquals' :: (Eq a) => a -> a -> ST s ()
assertEquals' x y = assertTrue' (x == y)

assertEquals :: (Eq a) => String -> a -> a -> ST s ()
assertEquals msg x y = assertTrue msg (x == y)

private mkHandler :: Exceptional e => e -> (e -> IO ())
private mkHandler _ = \_ -> assertTrue' true

-- TODO: currently odType doesn't work because it is evaluated by frege
--ofType :: e
--ofType = undefined

-- assertException "Test Exception" (head []) (undefined::Exception)
assertException :: (Exceptional e) => String -> a -> e -> IO ()
assertException msg x e = (return x >> fail msg) `catch` mkHandler e

--- A test case is composed by a name and the test itself
data TestCase = TestCase String (IO ())
